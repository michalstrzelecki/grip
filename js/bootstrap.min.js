!function(t,e){if("function"==typeof define&&define.amd)define([],e);else if("undefined"!=typeof exports)e();else{e(),t.bootstrap={}}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:this,(function(){"use strict";function t(e){return(t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(e)}
/*!
    * Bootstrap v4.4.1 (https://getbootstrap.com/)
    * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
    * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
    */var e,n;e=void 0,n=function(e,n,i){function o(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(t,e,n){return e&&o(t.prototype,e),n&&o(t,n),t}function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t){var e=this,i=!1;return n(this).one(h.TRANSITION_END,(function(){i=!0})),setTimeout((function(){i||h.triggerTransitionEnd(e)}),t),this}n=n&&n.hasOwnProperty("default")?n.default:n,i=i&&i.hasOwnProperty("default")?i.default:i;var h={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=n(t).css("transition-duration"),i=n(t).css("transition-delay"),o=parseFloat(e),s=parseFloat(i);return o||s?(e=e.split(",")[0],i=i.split(",")[0],1e3*(parseFloat(e)+parseFloat(i))):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){n(t).trigger("transitionend")},supportsTransitionEnd:function(){return Boolean("transitionend")},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var o=n[i],s=e[i],r=s&&h.isElement(s)?"element":(a=s,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(o).test(r))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+r+'" but expected type "'+o+'".')}var a},findShadowRoot:function(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?h.findShadowRoot(t.parentNode):null},jQueryDetection:function(){if(void 0===n)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t=n.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};h.jQueryDetection(),n.fn.emulateTransitionEnd=c,n.event.special[h.TRANSITION_END]={bindType:"transitionend",delegateType:"transitionend",handle:function(t){if(n(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};var u="alert",d=n.fn[u],f={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},g="alert",_="fade",m="show",p=function(){function t(t){this._element=t}var e=t.prototype;return e.close=function(t){var e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},e.dispose=function(){n.removeData(this._element,"bs.alert"),this._element=null},e._getRootElement=function(t){var e=h.getSelectorFromElement(t),i=!1;return e&&(i=document.querySelector(e)),i||(i=n(t).closest("."+g)[0]),i},e._triggerCloseEvent=function(t){var e=n.Event(f.CLOSE);return n(t).trigger(e),e},e._removeElement=function(t){var e=this;if(n(t).removeClass(m),n(t).hasClass(_)){var i=h.getTransitionDurationFromElement(t);n(t).one(h.TRANSITION_END,(function(n){return e._destroyElement(t,n)})).emulateTransitionEnd(i)}else this._destroyElement(t)},e._destroyElement=function(t){n(t).detach().trigger(f.CLOSED).remove()},t._jQueryInterface=function(e){return this.each((function(){var i=n(this),o=i.data("bs.alert");o||(o=new t(this),i.data("bs.alert",o)),"close"===e&&o[e](this)}))},t._handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},s(t,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),t}();n(document).on(f.CLICK_DATA_API,'[data-dismiss="alert"]',p._handleDismiss(new p)),n.fn[u]=p._jQueryInterface,n.fn[u].Constructor=p,n.fn[u].noConflict=function(){return n.fn[u]=d,p._jQueryInterface};var v=n.fn.button,b="active",y="btn",E="focus",C='[data-toggle^="button"]',T='[data-toggle="buttons"]',S='[data-toggle="button"]',w='[data-toggle="buttons"] .btn',D='input:not([type="hidden"])',I=".active",A=".btn",N={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api",LOAD_DATA_API:"load.bs.button.data-api"},O=function(){function t(t){this._element=t}var e=t.prototype;return e.toggle=function(){var t=!0,e=!0,i=n(this._element).closest(T)[0];if(i){var o=this._element.querySelector(D);if(o){if("radio"===o.type)if(o.checked&&this._element.classList.contains(b))t=!1;else{var s=i.querySelector(I);s&&n(s).removeClass(b)}else"checkbox"===o.type?"LABEL"===this._element.tagName&&o.checked===this._element.classList.contains(b)&&(t=!1):t=!1;t&&(o.checked=!this._element.classList.contains(b),n(o).trigger("change")),o.focus(),e=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(b)),t&&n(this._element).toggleClass(b))},e.dispose=function(){n.removeData(this._element,"bs.button"),this._element=null},t._jQueryInterface=function(e){return this.each((function(){var i=n(this).data("bs.button");i||(i=new t(this),n(this).data("bs.button",i)),"toggle"===e&&i[e]()}))},s(t,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),t}();n(document).on(N.CLICK_DATA_API,C,(function(t){var e=t.target;if(n(e).hasClass(y)||(e=n(e).closest(A)[0]),!e||e.hasAttribute("disabled")||e.classList.contains("disabled"))t.preventDefault();else{var i=e.querySelector(D);if(i&&(i.hasAttribute("disabled")||i.classList.contains("disabled")))return void t.preventDefault();O._jQueryInterface.call(n(e),"toggle")}})).on(N.FOCUS_BLUR_DATA_API,C,(function(t){var e=n(t.target).closest(A)[0];n(e).toggleClass(E,/^focus(in)?$/.test(t.type))})),n(window).on(N.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(w)),e=0,n=t.length;e<n;e++){var i=t[e],o=i.querySelector(D);o.checked||o.hasAttribute("checked")?i.classList.add(b):i.classList.remove(b)}for(var s=0,r=(t=[].slice.call(document.querySelectorAll(S))).length;s<r;s++){var a=t[s];"true"===a.getAttribute("aria-pressed")?a.classList.add(b):a.classList.remove(b)}})),n.fn.button=O._jQueryInterface,n.fn.button.Constructor=O,n.fn.button.noConflict=function(){return n.fn.button=v,O._jQueryInterface};var k="carousel",P=".bs.carousel",L=n.fn[k],j={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},H={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},R="next",x="prev",F="left",U="right",W={SLIDE:"slide"+P,SLID:"slid"+P,KEYDOWN:"keydown"+P,MOUSEENTER:"mouseenter"+P,MOUSELEAVE:"mouseleave"+P,TOUCHSTART:"touchstart"+P,TOUCHMOVE:"touchmove"+P,TOUCHEND:"touchend"+P,POINTERDOWN:"pointerdown"+P,POINTERUP:"pointerup"+P,DRAG_START:"dragstart"+P,LOAD_DATA_API:"load"+P+".data-api",CLICK_DATA_API:"click"+P+".data-api"},q="carousel",M="active",K="slide",Q="carousel-item-right",B="carousel-item-left",V="carousel-item-next",Y="carousel-item-prev",z="pointer-event",X=".active",$=".active.carousel-item",G=".carousel-item",J=".carousel-item img",Z=".carousel-item-next, .carousel-item-prev",tt=".carousel-indicators",et="[data-slide], [data-slide-to]",nt='[data-ride="carousel"]',it={TOUCH:"touch",PEN:"pen"},ot=function(){function e(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(tt),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var i=e.prototype;return i.next=function(){this._isSliding||this._slide(R)},i.nextWhenVisible=function(){!document.hidden&&n(this._element).is(":visible")&&"hidden"!==n(this._element).css("visibility")&&this.next()},i.prev=function(){this._isSliding||this._slide(x)},i.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(Z)&&(h.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},i.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},i.to=function(t){var e=this;this._activeElement=this._element.querySelector($);var i=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)n(this._element).one(W.SLID,(function(){return e.to(t)}));else{if(i===t)return this.pause(),void this.cycle();var o=t>i?R:x;this._slide(o,this._items[t])}},i.dispose=function(){n(this._element).off(P),n.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},i._getConfig=function(t){return t=l({},j,{},t),h.typeCheckConfig(k,t,H),t},i._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;this.touchDeltaX=0,e>0&&this.prev(),e<0&&this.next()}},i._addEventListeners=function(){var t=this;this._config.keyboard&&n(this._element).on(W.KEYDOWN,(function(e){return t._keydown(e)})),"hover"===this._config.pause&&n(this._element).on(W.MOUSEENTER,(function(e){return t.pause(e)})).on(W.MOUSELEAVE,(function(e){return t.cycle(e)})),this._config.touch&&this._addTouchEventListeners()},i._addTouchEventListeners=function(){var t=this;if(this._touchSupported){var e=function(e){t._pointerEvent&&it[e.originalEvent.pointerType.toUpperCase()]?t.touchStartX=e.originalEvent.clientX:t._pointerEvent||(t.touchStartX=e.originalEvent.touches[0].clientX)},i=function(e){t._pointerEvent&&it[e.originalEvent.pointerType.toUpperCase()]&&(t.touchDeltaX=e.originalEvent.clientX-t.touchStartX),t._handleSwipe(),"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout((function(e){return t.cycle(e)}),500+t._config.interval))};n(this._element.querySelectorAll(J)).on(W.DRAG_START,(function(t){return t.preventDefault()})),this._pointerEvent?(n(this._element).on(W.POINTERDOWN,(function(t){return e(t)})),n(this._element).on(W.POINTERUP,(function(t){return i(t)})),this._element.classList.add(z)):(n(this._element).on(W.TOUCHSTART,(function(t){return e(t)})),n(this._element).on(W.TOUCHMOVE,(function(e){return function(e){e.originalEvent.touches&&e.originalEvent.touches.length>1?t.touchDeltaX=0:t.touchDeltaX=e.originalEvent.touches[0].clientX-t.touchStartX}(e)})),n(this._element).on(W.TOUCHEND,(function(t){return i(t)})))}},i._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},i._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(G)):[],this._items.indexOf(t)},i._getItemByDirection=function(t,e){var n=t===R,i=t===x,o=this._getItemIndex(e),s=this._items.length-1;if((i&&0===o||n&&o===s)&&!this._config.wrap)return e;var r=(o+(t===x?-1:1))%this._items.length;return-1===r?this._items[this._items.length-1]:this._items[r]},i._triggerSlideEvent=function(t,e){var i=this._getItemIndex(t),o=this._getItemIndex(this._element.querySelector($)),s=n.Event(W.SLIDE,{relatedTarget:t,direction:e,from:o,to:i});return n(this._element).trigger(s),s},i._setActiveIndicatorElement=function(t){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll(X));n(e).removeClass(M);var i=this._indicatorsElement.children[this._getItemIndex(t)];i&&n(i).addClass(M)}},i._slide=function(t,e){var i,o,s,r=this,a=this._element.querySelector($),l=this._getItemIndex(a),c=e||a&&this._getItemByDirection(t,a),u=this._getItemIndex(c),d=Boolean(this._interval);if(t===R?(i=B,o=V,s=F):(i=Q,o=Y,s=U),c&&n(c).hasClass(M))this._isSliding=!1;else if(!this._triggerSlideEvent(c,s).isDefaultPrevented()&&a&&c){this._isSliding=!0,d&&this.pause(),this._setActiveIndicatorElement(c);var f=n.Event(W.SLID,{relatedTarget:c,direction:s,from:l,to:u});if(n(this._element).hasClass(K)){n(c).addClass(o),h.reflow(c),n(a).addClass(i),n(c).addClass(i);var g=parseInt(c.getAttribute("data-interval"),10);g?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=g):this._config.interval=this._config.defaultInterval||this._config.interval;var _=h.getTransitionDurationFromElement(a);n(a).one(h.TRANSITION_END,(function(){n(c).removeClass(i+" "+o).addClass(M),n(a).removeClass(M+" "+o+" "+i),r._isSliding=!1,setTimeout((function(){return n(r._element).trigger(f)}),0)})).emulateTransitionEnd(_)}else n(a).removeClass(M),n(c).addClass(M),this._isSliding=!1,n(this._element).trigger(f);d&&this.cycle()}},e._jQueryInterface=function(i){return this.each((function(){var o=n(this).data("bs.carousel"),s=l({},j,{},n(this).data());"object"===t(i)&&(s=l({},s,{},i));var r="string"==typeof i?i:s.slide;if(o||(o=new e(this,s),n(this).data("bs.carousel",o)),"number"==typeof i)o.to(i);else if("string"==typeof r){if(void 0===o[r])throw new TypeError('No method named "'+r+'"');o[r]()}else s.interval&&s.ride&&(o.pause(),o.cycle())}))},e._dataApiClickHandler=function(t){var i=h.getSelectorFromElement(this);if(i){var o=n(i)[0];if(o&&n(o).hasClass(q)){var s=l({},n(o).data(),{},n(this).data()),r=this.getAttribute("data-slide-to");r&&(s.interval=!1),e._jQueryInterface.call(n(o),s),r&&n(o).data("bs.carousel").to(r),t.preventDefault()}}},s(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return j}}]),e}();n(document).on(W.CLICK_DATA_API,et,ot._dataApiClickHandler),n(window).on(W.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll(nt)),e=0,i=t.length;e<i;e++){var o=n(t[e]);ot._jQueryInterface.call(o,o.data())}})),n.fn[k]=ot._jQueryInterface,n.fn[k].Constructor=ot,n.fn[k].noConflict=function(){return n.fn[k]=L,ot._jQueryInterface};var st="collapse",rt=n.fn[st],at={toggle:!0,parent:""},lt={toggle:"boolean",parent:"(string|element)"},ct={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},ht="show",ut="collapse",dt="collapsing",ft="collapsed",gt="width",_t="height",mt=".show, .collapsing",pt='[data-toggle="collapse"]',vt=function(){function e(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=[].slice.call(document.querySelectorAll(pt)),i=0,o=n.length;i<o;i++){var s=n[i],r=h.getSelectorFromElement(s),a=[].slice.call(document.querySelectorAll(r)).filter((function(e){return e===t}));null!==r&&a.length>0&&(this._selector=r,this._triggerArray.push(s))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var i=e.prototype;return i.toggle=function(){n(this._element).hasClass(ht)?this.hide():this.show()},i.show=function(){var t,i,o=this;if(!(this._isTransitioning||n(this._element).hasClass(ht)||(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(mt)).filter((function(t){return"string"==typeof o._config.parent?t.getAttribute("data-parent")===o._config.parent:t.classList.contains(ut)}))).length&&(t=null),t&&(i=n(t).not(this._selector).data("bs.collapse"))&&i._isTransitioning))){var s=n.Event(ct.SHOW);if(n(this._element).trigger(s),!s.isDefaultPrevented()){t&&(e._jQueryInterface.call(n(t).not(this._selector),"hide"),i||n(t).data("bs.collapse",null));var r=this._getDimension();n(this._element).removeClass(ut).addClass(dt),this._element.style[r]=0,this._triggerArray.length&&n(this._triggerArray).removeClass(ft).attr("aria-expanded",!0),this.setTransitioning(!0);var a="scroll"+(r[0].toUpperCase()+r.slice(1)),l=h.getTransitionDurationFromElement(this._element);n(this._element).one(h.TRANSITION_END,(function(){n(o._element).removeClass(dt).addClass(ut).addClass(ht),o._element.style[r]="",o.setTransitioning(!1),n(o._element).trigger(ct.SHOWN)})).emulateTransitionEnd(l),this._element.style[r]=this._element[a]+"px"}}},i.hide=function(){var t=this;if(!this._isTransitioning&&n(this._element).hasClass(ht)){var e=n.Event(ct.HIDE);if(n(this._element).trigger(e),!e.isDefaultPrevented()){var i=this._getDimension();this._element.style[i]=this._element.getBoundingClientRect()[i]+"px",h.reflow(this._element),n(this._element).addClass(dt).removeClass(ut).removeClass(ht);var o=this._triggerArray.length;if(o>0)for(var s=0;s<o;s++){var r=this._triggerArray[s],a=h.getSelectorFromElement(r);null!==a&&(n([].slice.call(document.querySelectorAll(a))).hasClass(ht)||n(r).addClass(ft).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[i]="";var l=h.getTransitionDurationFromElement(this._element);n(this._element).one(h.TRANSITION_END,(function(){t.setTransitioning(!1),n(t._element).removeClass(dt).addClass(ut).trigger(ct.HIDDEN)})).emulateTransitionEnd(l)}}},i.setTransitioning=function(t){this._isTransitioning=t},i.dispose=function(){n.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},i._getConfig=function(t){return(t=l({},at,{},t)).toggle=Boolean(t.toggle),h.typeCheckConfig(st,t,lt),t},i._getDimension=function(){return n(this._element).hasClass(gt)?gt:_t},i._getParent=function(){var t,i=this;h.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',s=[].slice.call(t.querySelectorAll(o));return n(s).each((function(t,n){i._addAriaAndCollapsedClass(e._getTargetFromElement(n),[n])})),t},i._addAriaAndCollapsedClass=function(t,e){var i=n(t).hasClass(ht);e.length&&n(e).toggleClass(ft,!i).attr("aria-expanded",i)},e._getTargetFromElement=function(t){var e=h.getSelectorFromElement(t);return e?document.querySelector(e):null},e._jQueryInterface=function(i){return this.each((function(){var o=n(this),s=o.data("bs.collapse"),r=l({},at,{},o.data(),{},"object"===t(i)&&i?i:{});if(!s&&r.toggle&&/show|hide/.test(i)&&(r.toggle=!1),s||(s=new e(this,r),o.data("bs.collapse",s)),"string"==typeof i){if(void 0===s[i])throw new TypeError('No method named "'+i+'"');s[i]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return at}}]),e}();n(document).on(ct.CLICK_DATA_API,pt,(function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var e=n(this),i=h.getSelectorFromElement(this),o=[].slice.call(document.querySelectorAll(i));n(o).each((function(){var t=n(this),i=t.data("bs.collapse")?"toggle":e.data();vt._jQueryInterface.call(t,i)}))})),n.fn[st]=vt._jQueryInterface,n.fn[st].Constructor=vt,n.fn[st].noConflict=function(){return n.fn[st]=rt,vt._jQueryInterface};var bt="dropdown",yt=n.fn[bt],Et=new RegExp("38|40|27"),Ct={HIDE:"hide.bs.dropdown",HIDDEN:"hidden.bs.dropdown",SHOW:"show.bs.dropdown",SHOWN:"shown.bs.dropdown",CLICK:"click.bs.dropdown",CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},Tt="disabled",St="show",wt="dropup",Dt="dropright",It="dropleft",At="dropdown-menu-right",Nt="position-static",Ot='[data-toggle="dropdown"]',kt=".dropdown form",Pt=".dropdown-menu",Lt=".navbar-nav",jt=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Ht="top-start",Rt="top-end",xt="bottom-start",Ft="bottom-end",Ut="right-start",Wt="left-start",qt={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},Mt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},Kt=function(){function e(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var o=e.prototype;return o.toggle=function(){if(!this._element.disabled&&!n(this._element).hasClass(Tt)){var t=n(this._menu).hasClass(St);e._clearMenus(),t||this.show(!0)}},o.show=function(t){if(void 0===t&&(t=!1),!(this._element.disabled||n(this._element).hasClass(Tt)||n(this._menu).hasClass(St))){var o={relatedTarget:this._element},s=n.Event(Ct.SHOW,o),r=e._getParentFromElement(this._element);if(n(r).trigger(s),!s.isDefaultPrevented()){if(!this._inNavbar&&t){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var a=this._element;"parent"===this._config.reference?a=r:h.isElement(this._config.reference)&&(a=this._config.reference,void 0!==this._config.reference.jquery&&(a=this._config.reference[0])),"scrollParent"!==this._config.boundary&&n(r).addClass(Nt),this._popper=new i(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===n(r).closest(Lt).length&&n(document.body).children().on("mouseover",null,n.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),n(this._menu).toggleClass(St),n(r).toggleClass(St).trigger(n.Event(Ct.SHOWN,o))}}},o.hide=function(){if(!this._element.disabled&&!n(this._element).hasClass(Tt)&&n(this._menu).hasClass(St)){var t={relatedTarget:this._element},i=n.Event(Ct.HIDE,t),o=e._getParentFromElement(this._element);n(o).trigger(i),i.isDefaultPrevented()||(this._popper&&this._popper.destroy(),n(this._menu).toggleClass(St),n(o).toggleClass(St).trigger(n.Event(Ct.HIDDEN,t)))}},o.dispose=function(){n.removeData(this._element,"bs.dropdown"),n(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},o.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},o._addEventListeners=function(){var t=this;n(this._element).on(Ct.CLICK,(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))},o._getConfig=function(t){return t=l({},this.constructor.Default,{},n(this._element).data(),{},t),h.typeCheckConfig(bt,t,this.constructor.DefaultType),t},o._getMenuElement=function(){if(!this._menu){var t=e._getParentFromElement(this._element);t&&(this._menu=t.querySelector(Pt))}return this._menu},o._getPlacement=function(){var t=n(this._element.parentNode),e=xt;return t.hasClass(wt)?(e=Ht,n(this._menu).hasClass(At)&&(e=Rt)):t.hasClass(Dt)?e=Ut:t.hasClass(It)?e=Wt:n(this._menu).hasClass(At)&&(e=Ft),e},o._detectNavbar=function(){return n(this._element).closest(".navbar").length>0},o._getOffset=function(){var t=this,e={};return"function"==typeof this._config.offset?e.fn=function(e){return e.offsets=l({},e.offsets,{},t._config.offset(e.offsets,t._element)||{}),e}:e.offset=this._config.offset,e},o._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),l({},t,{},this._config.popperConfig)},e._jQueryInterface=function(i){return this.each((function(){var o=n(this).data("bs.dropdown"),s="object"===t(i)?i:null;if(o||(o=new e(this,s),n(this).data("bs.dropdown",o)),"string"==typeof i){if(void 0===o[i])throw new TypeError('No method named "'+i+'"');o[i]()}}))},e._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var i=[].slice.call(document.querySelectorAll(Ot)),o=0,s=i.length;o<s;o++){var r=e._getParentFromElement(i[o]),a=n(i[o]).data("bs.dropdown"),l={relatedTarget:i[o]};if(t&&"click"===t.type&&(l.clickEvent=t),a){var c=a._menu;if(n(r).hasClass(St)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&n.contains(r,t.target))){var h=n.Event(Ct.HIDE,l);n(r).trigger(h),h.isDefaultPrevented()||("ontouchstart"in document.documentElement&&n(document.body).children().off("mouseover",null,n.noop),i[o].setAttribute("aria-expanded","false"),a._popper&&a._popper.destroy(),n(c).removeClass(St),n(r).removeClass(St).trigger(n.Event(Ct.HIDDEN,l)))}}}},e._getParentFromElement=function(t){var e,n=h.getSelectorFromElement(t);return n&&(e=document.querySelector(n)),e||t.parentNode},e._dataApiKeydownHandler=function(t){if(!(/input|textarea/i.test(t.target.tagName)?32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||n(t.target).closest(Pt).length):!Et.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!n(this).hasClass(Tt))){var i=e._getParentFromElement(this),o=n(i).hasClass(St);if(o||27!==t.which)if(o&&(!o||27!==t.which&&32!==t.which)){var s=[].slice.call(i.querySelectorAll(jt)).filter((function(t){return n(t).is(":visible")}));if(0!==s.length){var r=s.indexOf(t.target);38===t.which&&r>0&&r--,40===t.which&&r<s.length-1&&r++,r<0&&(r=0),s[r].focus()}}else{if(27===t.which){var a=i.querySelector(Ot);n(a).trigger("focus")}n(this).trigger("click")}}},s(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return qt}},{key:"DefaultType",get:function(){return Mt}}]),e}();n(document).on(Ct.KEYDOWN_DATA_API,Ot,Kt._dataApiKeydownHandler).on(Ct.KEYDOWN_DATA_API,Pt,Kt._dataApiKeydownHandler).on(Ct.CLICK_DATA_API+" "+Ct.KEYUP_DATA_API,Kt._clearMenus).on(Ct.CLICK_DATA_API,Ot,(function(t){t.preventDefault(),t.stopPropagation(),Kt._jQueryInterface.call(n(this),"toggle")})).on(Ct.CLICK_DATA_API,kt,(function(t){t.stopPropagation()})),n.fn[bt]=Kt._jQueryInterface,n.fn[bt].Constructor=Kt,n.fn[bt].noConflict=function(){return n.fn[bt]=yt,Kt._jQueryInterface};var Qt=n.fn.modal,Bt={backdrop:!0,keyboard:!0,focus:!0,show:!0},Vt={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Yt={HIDE:"hide.bs.modal",HIDE_PREVENTED:"hidePrevented.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},zt="modal-dialog-scrollable",Xt="modal-scrollbar-measure",$t="modal-backdrop",Gt="modal-open",Jt="fade",Zt="show",te="modal-static",ee=".modal-dialog",ne=".modal-body",ie='[data-toggle="modal"]',oe='[data-dismiss="modal"]',se=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",re=".sticky-top",ae=function(){function e(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(ee),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var i=e.prototype;return i.toggle=function(t){return this._isShown?this.hide():this.show(t)},i.show=function(t){var e=this;if(!this._isShown&&!this._isTransitioning){n(this._element).hasClass(Jt)&&(this._isTransitioning=!0);var i=n.Event(Yt.SHOW,{relatedTarget:t});n(this._element).trigger(i),this._isShown||i.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),n(this._element).on(Yt.CLICK_DISMISS,oe,(function(t){return e.hide(t)})),n(this._dialog).on(Yt.MOUSEDOWN_DISMISS,(function(){n(e._element).one(Yt.MOUSEUP_DISMISS,(function(t){n(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return e._showElement(t)})))}},i.hide=function(t){var e=this;if(t&&t.preventDefault(),this._isShown&&!this._isTransitioning){var i=n.Event(Yt.HIDE);if(n(this._element).trigger(i),this._isShown&&!i.isDefaultPrevented()){this._isShown=!1;var o=n(this._element).hasClass(Jt);if(o&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),n(document).off(Yt.FOCUSIN),n(this._element).removeClass(Zt),n(this._element).off(Yt.CLICK_DISMISS),n(this._dialog).off(Yt.MOUSEDOWN_DISMISS),o){var s=h.getTransitionDurationFromElement(this._element);n(this._element).one(h.TRANSITION_END,(function(t){return e._hideModal(t)})).emulateTransitionEnd(s)}else this._hideModal()}}},i.dispose=function(){[window,this._element,this._dialog].forEach((function(t){return n(t).off(".bs.modal")})),n(document).off(Yt.FOCUSIN),n.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},i.handleUpdate=function(){this._adjustDialog()},i._getConfig=function(t){return t=l({},Bt,{},t),h.typeCheckConfig("modal",t,Vt),t},i._triggerBackdropTransition=function(){var t=this;if("static"===this._config.backdrop){var e=n.Event(Yt.HIDE_PREVENTED);if(n(this._element).trigger(e),e.defaultPrevented)return;this._element.classList.add(te);var i=h.getTransitionDurationFromElement(this._element);n(this._element).one(h.TRANSITION_END,(function(){t._element.classList.remove(te)})).emulateTransitionEnd(i),this._element.focus()}else this.hide()},i._showElement=function(t){var e=this,i=n(this._element).hasClass(Jt),o=this._dialog?this._dialog.querySelector(ne):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),n(this._dialog).hasClass(zt)&&o?o.scrollTop=0:this._element.scrollTop=0,i&&h.reflow(this._element),n(this._element).addClass(Zt),this._config.focus&&this._enforceFocus();var s=n.Event(Yt.SHOWN,{relatedTarget:t}),r=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,n(e._element).trigger(s)};if(i){var a=h.getTransitionDurationFromElement(this._dialog);n(this._dialog).one(h.TRANSITION_END,r).emulateTransitionEnd(a)}else r()},i._enforceFocus=function(){var t=this;n(document).off(Yt.FOCUSIN).on(Yt.FOCUSIN,(function(e){document!==e.target&&t._element!==e.target&&0===n(t._element).has(e.target).length&&t._element.focus()}))},i._setEscapeEvent=function(){var t=this;this._isShown&&this._config.keyboard?n(this._element).on(Yt.KEYDOWN_DISMISS,(function(e){27===e.which&&t._triggerBackdropTransition()})):this._isShown||n(this._element).off(Yt.KEYDOWN_DISMISS)},i._setResizeEvent=function(){var t=this;this._isShown?n(window).on(Yt.RESIZE,(function(e){return t.handleUpdate(e)})):n(window).off(Yt.RESIZE)},i._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop((function(){n(document.body).removeClass(Gt),t._resetAdjustments(),t._resetScrollbar(),n(t._element).trigger(Yt.HIDDEN)}))},i._removeBackdrop=function(){this._backdrop&&(n(this._backdrop).remove(),this._backdrop=null)},i._showBackdrop=function(t){var e=this,i=n(this._element).hasClass(Jt)?Jt:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=$t,i&&this._backdrop.classList.add(i),n(this._backdrop).appendTo(document.body),n(this._element).on(Yt.CLICK_DISMISS,(function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&e._triggerBackdropTransition()})),i&&h.reflow(this._backdrop),n(this._backdrop).addClass(Zt),!t)return;if(!i)return void t();var o=h.getTransitionDurationFromElement(this._backdrop);n(this._backdrop).one(h.TRANSITION_END,t).emulateTransitionEnd(o)}else if(!this._isShown&&this._backdrop){n(this._backdrop).removeClass(Zt);var s=function(){e._removeBackdrop(),t&&t()};if(n(this._element).hasClass(Jt)){var r=h.getTransitionDurationFromElement(this._backdrop);n(this._backdrop).one(h.TRANSITION_END,s).emulateTransitionEnd(r)}else s()}else t&&t()},i._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},i._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},i._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},i._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){var e=[].slice.call(document.querySelectorAll(se)),i=[].slice.call(document.querySelectorAll(re));n(e).each((function(e,i){var o=i.style.paddingRight,s=n(i).css("padding-right");n(i).data("padding-right",o).css("padding-right",parseFloat(s)+t._scrollbarWidth+"px")})),n(i).each((function(e,i){var o=i.style.marginRight,s=n(i).css("margin-right");n(i).data("margin-right",o).css("margin-right",parseFloat(s)-t._scrollbarWidth+"px")}));var o=document.body.style.paddingRight,s=n(document.body).css("padding-right");n(document.body).data("padding-right",o).css("padding-right",parseFloat(s)+this._scrollbarWidth+"px")}n(document.body).addClass(Gt)},i._resetScrollbar=function(){var t=[].slice.call(document.querySelectorAll(se));n(t).each((function(t,e){var i=n(e).data("padding-right");n(e).removeData("padding-right"),e.style.paddingRight=i||""}));var e=[].slice.call(document.querySelectorAll(""+re));n(e).each((function(t,e){var i=n(e).data("margin-right");void 0!==i&&n(e).css("margin-right",i).removeData("margin-right")}));var i=n(document.body).data("padding-right");n(document.body).removeData("padding-right"),document.body.style.paddingRight=i||""},i._getScrollbarWidth=function(){var t=document.createElement("div");t.className=Xt,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},e._jQueryInterface=function(i,o){return this.each((function(){var s=n(this).data("bs.modal"),r=l({},Bt,{},n(this).data(),{},"object"===t(i)&&i?i:{});if(s||(s=new e(this,r),n(this).data("bs.modal",s)),"string"==typeof i){if(void 0===s[i])throw new TypeError('No method named "'+i+'"');s[i](o)}else r.show&&s.show(o)}))},s(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Bt}}]),e}();n(document).on(Yt.CLICK_DATA_API,ie,(function(t){var e,i=this,o=h.getSelectorFromElement(this);o&&(e=document.querySelector(o));var s=n(e).data("bs.modal")?"toggle":l({},n(e).data(),{},n(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var r=n(e).one(Yt.SHOW,(function(t){t.isDefaultPrevented()||r.one(Yt.HIDDEN,(function(){n(i).is(":visible")&&i.focus()}))}));ae._jQueryInterface.call(n(e),s,this)})),n.fn.modal=ae._jQueryInterface,n.fn.modal.Constructor=ae,n.fn.modal.noConflict=function(){return n.fn.modal=Qt,ae._jQueryInterface};var le=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],ce={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},he=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,ue=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function de(t,e,n){if(0===t.length)return t;if(n&&"function"==typeof n)return n(t);for(var i=(new window.DOMParser).parseFromString(t,"text/html"),o=Object.keys(e),s=[].slice.call(i.body.querySelectorAll("*")),r=function(t,n){var i=s[t],r=i.nodeName.toLowerCase();if(-1===o.indexOf(i.nodeName.toLowerCase()))return i.parentNode.removeChild(i),"continue";var a=[].slice.call(i.attributes),l=[].concat(e["*"]||[],e[r]||[]);a.forEach((function(t){(function(t,e){var n=t.nodeName.toLowerCase();if(-1!==e.indexOf(n))return-1===le.indexOf(n)||Boolean(t.nodeValue.match(he)||t.nodeValue.match(ue));for(var i=e.filter((function(t){return t instanceof RegExp})),o=0,s=i.length;o<s;o++)if(n.match(i[o]))return!0;return!1})(t,l)||i.removeAttribute(t.nodeName)}))},a=0,l=s.length;a<l;a++)r(a);return i.body.innerHTML}var fe="tooltip",ge=n.fn[fe],_e=new RegExp("(^|\\s)bs-tooltip\\S+","g"),me=["sanitize","whiteList","sanitizeFn"],pe={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},ve={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},be={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:ce,popperConfig:null},ye="show",Ee="out",Ce={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},Te="fade",Se="show",we=".tooltip-inner",De=".arrow",Ie="hover",Ae="focus",Ne="click",Oe="manual",ke=function(){function e(t,e){if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var o=e.prototype;return o.enable=function(){this._isEnabled=!0},o.disable=function(){this._isEnabled=!1},o.toggleEnabled=function(){this._isEnabled=!this._isEnabled},o.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,i=n(t.currentTarget).data(e);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),n(t.currentTarget).data(e,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(n(this.getTipElement()).hasClass(Se))return void this._leave(null,this);this._enter(null,this)}},o.dispose=function(){clearTimeout(this._timeout),n.removeData(this.element,this.constructor.DATA_KEY),n(this.element).off(this.constructor.EVENT_KEY),n(this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&n(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},o.show=function(){var t=this;if("none"===n(this.element).css("display"))throw new Error("Please use show on visible elements");var e=n.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){n(this.element).trigger(e);var o=h.findShadowRoot(this.element),s=n.contains(null!==o?o:this.element.ownerDocument.documentElement,this.element);if(e.isDefaultPrevented()||!s)return;var r=this.getTipElement(),a=h.getUID(this.constructor.NAME);r.setAttribute("id",a),this.element.setAttribute("aria-describedby",a),this.setContent(),this.config.animation&&n(r).addClass(Te);var l="function"==typeof this.config.placement?this.config.placement.call(this,r,this.element):this.config.placement,c=this._getAttachment(l);this.addAttachmentClass(c);var u=this._getContainer();n(r).data(this.constructor.DATA_KEY,this),n.contains(this.element.ownerDocument.documentElement,this.tip)||n(r).appendTo(u),n(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new i(this.element,r,this._getPopperConfig(c)),n(r).addClass(Se),"ontouchstart"in document.documentElement&&n(document.body).children().on("mouseover",null,n.noop);var d=function(){t.config.animation&&t._fixTransition();var e=t._hoverState;t._hoverState=null,n(t.element).trigger(t.constructor.Event.SHOWN),e===Ee&&t._leave(null,t)};if(n(this.tip).hasClass(Te)){var f=h.getTransitionDurationFromElement(this.tip);n(this.tip).one(h.TRANSITION_END,d).emulateTransitionEnd(f)}else d()}},o.hide=function(t){var e=this,i=this.getTipElement(),o=n.Event(this.constructor.Event.HIDE),s=function(){e._hoverState!==ye&&i.parentNode&&i.parentNode.removeChild(i),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),n(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(n(this.element).trigger(o),!o.isDefaultPrevented()){if(n(i).removeClass(Se),"ontouchstart"in document.documentElement&&n(document.body).children().off("mouseover",null,n.noop),this._activeTrigger[Ne]=!1,this._activeTrigger[Ae]=!1,this._activeTrigger[Ie]=!1,n(this.tip).hasClass(Te)){var r=h.getTransitionDurationFromElement(i);n(i).one(h.TRANSITION_END,s).emulateTransitionEnd(r)}else s();this._hoverState=""}},o.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},o.isWithContent=function(){return Boolean(this.getTitle())},o.addAttachmentClass=function(t){n(this.getTipElement()).addClass("bs-tooltip-"+t)},o.getTipElement=function(){return this.tip=this.tip||n(this.config.template)[0],this.tip},o.setContent=function(){var t=this.getTipElement();this.setElementContent(n(t.querySelectorAll(we)),this.getTitle()),n(t).removeClass(Te+" "+Se)},o.setElementContent=function(e,i){"object"!==t(i)||!i.nodeType&&!i.jquery?this.config.html?(this.config.sanitize&&(i=de(i,this.config.whiteList,this.config.sanitizeFn)),e.html(i)):e.text(i):this.config.html?n(i).parent().is(e)||e.empty().append(i):e.text(n(i).text())},o.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},o._getPopperConfig=function(t){var e=this;return l({},{placement:t,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:De},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){return e._handlePopperPlacementChange(t)}},{},this.config.popperConfig)},o._getOffset=function(){var t=this,e={};return"function"==typeof this.config.offset?e.fn=function(e){return e.offsets=l({},e.offsets,{},t.config.offset(e.offsets,t.element)||{}),e}:e.offset=this.config.offset,e},o._getContainer=function(){return!1===this.config.container?document.body:h.isElement(this.config.container)?n(this.config.container):n(document).find(this.config.container)},o._getAttachment=function(t){return ve[t.toUpperCase()]},o._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach((function(e){if("click"===e)n(t.element).on(t.constructor.Event.CLICK,t.config.selector,(function(e){return t.toggle(e)}));else if(e!==Oe){var i=e===Ie?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,o=e===Ie?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;n(t.element).on(i,t.config.selector,(function(e){return t._enter(e)})).on(o,t.config.selector,(function(e){return t._leave(e)}))}})),this._hideModalHandler=function(){t.element&&t.hide()},n(this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=l({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},o._fixTitle=function(){var e=t(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},o._enter=function(t,e){var i=this.constructor.DATA_KEY;(e=e||n(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),n(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusin"===t.type?Ae:Ie]=!0),n(e.getTipElement()).hasClass(Se)||e._hoverState===ye?e._hoverState=ye:(clearTimeout(e._timeout),e._hoverState=ye,e.config.delay&&e.config.delay.show?e._timeout=setTimeout((function(){e._hoverState===ye&&e.show()}),e.config.delay.show):e.show())},o._leave=function(t,e){var i=this.constructor.DATA_KEY;(e=e||n(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),n(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusout"===t.type?Ae:Ie]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=Ee,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout((function(){e._hoverState===Ee&&e.hide()}),e.config.delay.hide):e.hide())},o._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},o._getConfig=function(e){var i=n(this.element).data();return Object.keys(i).forEach((function(t){-1!==me.indexOf(t)&&delete i[t]})),"number"==typeof(e=l({},this.constructor.Default,{},i,{},"object"===t(e)&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),h.typeCheckConfig(fe,e,this.constructor.DefaultType),e.sanitize&&(e.template=de(e.template,e.whiteList,e.sanitizeFn)),e},o._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},o._cleanTipClass=function(){var t=n(this.getTipElement()),e=t.attr("class").match(_e);null!==e&&e.length&&t.removeClass(e.join(""))},o._handlePopperPlacementChange=function(t){var e=t.instance;this.tip=e.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},o._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(n(t).removeClass(Te),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},e._jQueryInterface=function(i){return this.each((function(){var o=n(this).data("bs.tooltip"),s="object"===t(i)&&i;if((o||!/dispose|hide/.test(i))&&(o||(o=new e(this,s),n(this).data("bs.tooltip",o)),"string"==typeof i)){if(void 0===o[i])throw new TypeError('No method named "'+i+'"');o[i]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return be}},{key:"NAME",get:function(){return fe}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return Ce}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return pe}}]),e}();n.fn[fe]=ke._jQueryInterface,n.fn[fe].Constructor=ke,n.fn[fe].noConflict=function(){return n.fn[fe]=ge,ke._jQueryInterface};var Pe="popover",Le=n.fn[Pe],je=new RegExp("(^|\\s)bs-popover\\S+","g"),He=l({},ke.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Re=l({},ke.DefaultType,{content:"(string|element|function)"}),xe="fade",Fe="show",Ue=".popover-header",We=".popover-body",qe={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},Me=function(e){var i,o;function r(){return e.apply(this,arguments)||this}o=e,(i=r).prototype=Object.create(o.prototype),i.prototype.constructor=i,i.__proto__=o;var a=r.prototype;return a.isWithContent=function(){return this.getTitle()||this._getContent()},a.addAttachmentClass=function(t){n(this.getTipElement()).addClass("bs-popover-"+t)},a.getTipElement=function(){return this.tip=this.tip||n(this.config.template)[0],this.tip},a.setContent=function(){var t=n(this.getTipElement());this.setElementContent(t.find(Ue),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(We),e),t.removeClass(xe+" "+Fe)},a._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},a._cleanTipClass=function(){var t=n(this.getTipElement()),e=t.attr("class").match(je);null!==e&&e.length>0&&t.removeClass(e.join(""))},r._jQueryInterface=function(e){return this.each((function(){var i=n(this).data("bs.popover"),o="object"===t(e)?e:null;if((i||!/dispose|hide/.test(e))&&(i||(i=new r(this,o),n(this).data("bs.popover",i)),"string"==typeof e)){if(void 0===i[e])throw new TypeError('No method named "'+e+'"');i[e]()}}))},s(r,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return He}},{key:"NAME",get:function(){return Pe}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return qe}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return Re}}]),r}(ke);n.fn[Pe]=Me._jQueryInterface,n.fn[Pe].Constructor=Me,n.fn[Pe].noConflict=function(){return n.fn[Pe]=Le,Me._jQueryInterface};var Ke="scrollspy",Qe=n.fn[Ke],Be={offset:10,method:"auto",target:""},Ve={offset:"number",method:"string",target:"(string|element)"},Ye={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},ze="dropdown-item",Xe="active",$e='[data-spy="scroll"]',Ge=".nav, .list-group",Je=".nav-link",Ze=".nav-item",tn=".list-group-item",en=".dropdown",nn=".dropdown-item",on=".dropdown-toggle",sn="offset",rn="position",an=function(){function e(t,e){var i=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+Je+","+this._config.target+" "+tn+","+this._config.target+" "+nn,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,n(this._scrollElement).on(Ye.SCROLL,(function(t){return i._process(t)})),this.refresh(),this._process()}var i=e.prototype;return i.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?sn:rn,i="auto"===this._config.method?e:this._config.method,o=i===rn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(t){var e,s=h.getSelectorFromElement(t);if(s&&(e=document.querySelector(s)),e){var r=e.getBoundingClientRect();if(r.width||r.height)return[n(e)[i]().top+o,s]}return null})).filter((function(t){return t})).sort((function(t,e){return t[0]-e[0]})).forEach((function(e){t._offsets.push(e[0]),t._targets.push(e[1])}))},i.dispose=function(){n.removeData(this._element,"bs.scrollspy"),n(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},i._getConfig=function(e){if("string"!=typeof(e=l({},Be,{},"object"===t(e)&&e?e:{})).target){var i=n(e.target).attr("id");i||(i=h.getUID(Ke),n(e.target).attr("id",i)),e.target="#"+i}return h.typeCheckConfig(Ke,e,Ve),e},i._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},i._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},i._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},i._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;)this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}},i._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",").map((function(e){return e+'[data-target="'+t+'"],'+e+'[href="'+t+'"]'})),i=n([].slice.call(document.querySelectorAll(e.join(","))));i.hasClass(ze)?(i.closest(en).find(on).addClass(Xe),i.addClass(Xe)):(i.addClass(Xe),i.parents(Ge).prev(Je+", "+tn).addClass(Xe),i.parents(Ge).prev(Ze).children(Je).addClass(Xe)),n(this._scrollElement).trigger(Ye.ACTIVATE,{relatedTarget:t})},i._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(t){return t.classList.contains(Xe)})).forEach((function(t){return t.classList.remove(Xe)}))},e._jQueryInterface=function(i){return this.each((function(){var o=n(this).data("bs.scrollspy"),s="object"===t(i)&&i;if(o||(o=new e(this,s),n(this).data("bs.scrollspy",o)),"string"==typeof i){if(void 0===o[i])throw new TypeError('No method named "'+i+'"');o[i]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Be}}]),e}();n(window).on(Ye.LOAD_DATA_API,(function(){for(var t=[].slice.call(document.querySelectorAll($e)),e=t.length;e--;){var i=n(t[e]);an._jQueryInterface.call(i,i.data())}})),n.fn[Ke]=an._jQueryInterface,n.fn[Ke].Constructor=an,n.fn[Ke].noConflict=function(){return n.fn[Ke]=Qe,an._jQueryInterface};var ln=n.fn.tab,cn={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},hn="dropdown-menu",un="active",dn="disabled",fn="fade",gn="show",_n=".dropdown",mn=".nav, .list-group",pn=".active",vn="> li > .active",bn='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',yn=".dropdown-toggle",En="> .dropdown-menu .active",Cn=function(){function t(t){this._element=t}var e=t.prototype;return e.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&n(this._element).hasClass(un)||n(this._element).hasClass(dn))){var e,i,o=n(this._element).closest(mn)[0],s=h.getSelectorFromElement(this._element);if(o){var r="UL"===o.nodeName||"OL"===o.nodeName?vn:pn;i=(i=n.makeArray(n(o).find(r)))[i.length-1]}var a=n.Event(cn.HIDE,{relatedTarget:this._element}),l=n.Event(cn.SHOW,{relatedTarget:i});if(i&&n(i).trigger(a),n(this._element).trigger(l),!l.isDefaultPrevented()&&!a.isDefaultPrevented()){s&&(e=document.querySelector(s)),this._activate(this._element,o);var c=function(){var e=n.Event(cn.HIDDEN,{relatedTarget:t._element}),o=n.Event(cn.SHOWN,{relatedTarget:i});n(i).trigger(e),n(t._element).trigger(o)};e?this._activate(e,e.parentNode,c):c()}}},e.dispose=function(){n.removeData(this._element,"bs.tab"),this._element=null},e._activate=function(t,e,i){var o=this,s=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?n(e).children(pn):n(e).find(vn))[0],r=i&&s&&n(s).hasClass(fn),a=function(){return o._transitionComplete(t,s,i)};if(s&&r){var l=h.getTransitionDurationFromElement(s);n(s).removeClass(gn).one(h.TRANSITION_END,a).emulateTransitionEnd(l)}else a()},e._transitionComplete=function(t,e,i){if(e){n(e).removeClass(un);var o=n(e.parentNode).find(En)[0];o&&n(o).removeClass(un),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(n(t).addClass(un),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),h.reflow(t),t.classList.contains(fn)&&t.classList.add(gn),t.parentNode&&n(t.parentNode).hasClass(hn)){var s=n(t).closest(_n)[0];if(s){var r=[].slice.call(s.querySelectorAll(yn));n(r).addClass(un)}t.setAttribute("aria-expanded",!0)}i&&i()},t._jQueryInterface=function(e){return this.each((function(){var i=n(this),o=i.data("bs.tab");if(o||(o=new t(this),i.data("bs.tab",o)),"string"==typeof e){if(void 0===o[e])throw new TypeError('No method named "'+e+'"');o[e]()}}))},s(t,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),t}();n(document).on(cn.CLICK_DATA_API,bn,(function(t){t.preventDefault(),Cn._jQueryInterface.call(n(this),"show")})),n.fn.tab=Cn._jQueryInterface,n.fn.tab.Constructor=Cn,n.fn.tab.noConflict=function(){return n.fn.tab=ln,Cn._jQueryInterface};var Tn=n.fn.toast,Sn={CLICK_DISMISS:"click.dismiss.bs.toast",HIDE:"hide.bs.toast",HIDDEN:"hidden.bs.toast",SHOW:"show.bs.toast",SHOWN:"shown.bs.toast"},wn="fade",Dn="hide",In="show",An="showing",Nn={animation:"boolean",autohide:"boolean",delay:"number"},On={animation:!0,autohide:!0,delay:500},kn='[data-dismiss="toast"]',Pn=function(){function e(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}var i=e.prototype;return i.show=function(){var t=this,e=n.Event(Sn.SHOW);if(n(this._element).trigger(e),!e.isDefaultPrevented()){this._config.animation&&this._element.classList.add(wn);var i=function(){t._element.classList.remove(An),t._element.classList.add(In),n(t._element).trigger(Sn.SHOWN),t._config.autohide&&(t._timeout=setTimeout((function(){t.hide()}),t._config.delay))};if(this._element.classList.remove(Dn),h.reflow(this._element),this._element.classList.add(An),this._config.animation){var o=h.getTransitionDurationFromElement(this._element);n(this._element).one(h.TRANSITION_END,i).emulateTransitionEnd(o)}else i()}},i.hide=function(){if(this._element.classList.contains(In)){var t=n.Event(Sn.HIDE);n(this._element).trigger(t),t.isDefaultPrevented()||this._close()}},i.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(In)&&this._element.classList.remove(In),n(this._element).off(Sn.CLICK_DISMISS),n.removeData(this._element,"bs.toast"),this._element=null,this._config=null},i._getConfig=function(e){return e=l({},On,{},n(this._element).data(),{},"object"===t(e)&&e?e:{}),h.typeCheckConfig("toast",e,this.constructor.DefaultType),e},i._setListeners=function(){var t=this;n(this._element).on(Sn.CLICK_DISMISS,kn,(function(){return t.hide()}))},i._close=function(){var t=this,e=function(){t._element.classList.add(Dn),n(t._element).trigger(Sn.HIDDEN)};if(this._element.classList.remove(In),this._config.animation){var i=h.getTransitionDurationFromElement(this._element);n(this._element).one(h.TRANSITION_END,e).emulateTransitionEnd(i)}else e()},e._jQueryInterface=function(i){return this.each((function(){var o=n(this),s=o.data("bs.toast"),r="object"===t(i)&&i;if(s||(s=new e(this,r),o.data("bs.toast",s)),"string"==typeof i){if(void 0===s[i])throw new TypeError('No method named "'+i+'"');s[i](this)}}))},s(e,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"DefaultType",get:function(){return Nn}},{key:"Default",get:function(){return On}}]),e}();n.fn.toast=Pn._jQueryInterface,n.fn.toast.Constructor=Pn,n.fn.toast.noConflict=function(){return n.fn.toast=Tn,Pn._jQueryInterface},e.Alert=p,e.Button=O,e.Carousel=ot,e.Collapse=vt,e.Dropdown=Kt,e.Modal=ae,e.Popover=Me,e.Scrollspy=an,e.Tab=Cn,e.Toast=Pn,e.Tooltip=ke,e.Util=h,Object.defineProperty(e,"__esModule",{value:!0})},"object"===("undefined"==typeof exports?"undefined":t(exports))&&"undefined"!=typeof module?n(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],n):n((e=e||self).bootstrap={},e.jQuery,e.Popper)}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
